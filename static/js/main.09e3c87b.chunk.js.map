{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","console","log","target","rows","style","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","msg","word","lower","charAt","slice","capitalise","defaultProps","home","about","App","setMode","setAlert","message","setTimeout","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09e3c87b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { a } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">\r\n              {/* {props.home} */}\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"/about\">\r\n                {props.about}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-warning\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n    home: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    home: 'Home text here',\r\n    about: 'About text here'\r\n  };","import React, {useState} from \"react\"\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" +  text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Connverted to Uppercase\",\"success\");\r\n    }\r\n    const handleLowClick = ()=>{\r\n        // console.log(\"Lowercase was clicked\" +  text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Connverted to Lowercase\",\"success\");\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n      let newText= '';\r\n      setText(newText);\r\n      props.showAlert(\"Message box cleared\",\"success\");\r\n    }\r\n    const handleOnChange= (event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra Spaces removed\",\"success\");\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n      let text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      // text.setSelectionRange(0,9999);\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\nconst [text, setText] = useState('');\r\n\r\n  return (\r\n      <>\r\n    <div>\r\n      <h1>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"3\" style={{backgroundColor: props.mode === 'dark'?'grey': 'light'}}></textarea>\r\n      </div>\r\n      <button className={`btn btn-outline-warning bg-${props.mode === 'light'?'dark':'light'} mx-2`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className={`btn btn-outline-warning bg-${props.mode === 'light'?'dark':'light'} mx-2`} onClick={handleLowClick}>Convert to Lowercase</button>\r\n      <button className={`btn btn-outline-warning bg-${props.mode === 'light'?'dark':'light'} mx-2`} onClick={handleClearClick}>Clear Text</button>\r\n      <button className={`btn btn-outline-warning bg-${props.mode === 'light'?'dark':'light'} mx-2`} onClick={handleCopy}>Copy Text</button>\r\n      <button className={`btn btn-outline-warning bg-${props.mode === 'light'?'dark':'light'} mx-2`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(\" \").length} words and {text.length}</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read this!!!</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter text to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalise=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&<div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n        <strong>{props.alert.msg}</strong> {capitalise(props.alert.type)}\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 5000);\n  }\n  const toggleMode =()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title ='NEWS4U - Dark Mode';\n      setInterval(() => {\n        document.title ='NEWS4U - Amazing';\n      }, 2000);\n      setInterval(() => {\n        document.title ='NEWS4U - Superb';\n      }, 1400);\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title ='NEWS4U - Light Mode';\n\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n<Navbar title=\"NEWS4U\" home=\"Home\" about=\"About Us\" mode={mode} toggleMode={toggleMode} />\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n{/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n          <About/>\n          </Route>\n           */}\n          \n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n\n\n\n</div>\n{/* </Router> */}\n\n{/* <Navbar /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}